//EXERCICIOS DE ENTERPRETA√áAO:

//-----------------------------------------------------------------------------------------------------------------------------------
// 1. Leia o c√≥digo abaixo

// function minhaFuncao(variavel) {
// 	return variavel * 5
// }

// console.log(minhaFuncao(2))
// console.log(minhaFuncao(10))

//     a) O que vai ser impresso no console?

//  b) O que aconteceria se retirasse os dois `console.log` e
//     simplesmente invocasse a fun√ß√£o `minhaFuncao(2)` e `minhaFuncao(10)`?
//     O que apareceria no console?

//A-PRIMEIRO CONSOLE.LOG, 10, E NO SEGUNDO, 50.
//B- O PROGRAMA RODARIA NORMALMENTE, MAS NAO APARECERIA NENHUMA INFORMA√áAO NO CONSOLE.

//-----------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------------------
// 2. Leia o c√≥digo abaixo

// let textoDoUsuario = prompt("Insira um texto")

// const outraFuncao = function(texto) {
// 	return texto.toLowerCase().includes("cenoura")
// }

// const resposta = outraFuncao(textoDoUsuario)
// console.log(resposta)

//     a. Explique o que essa fun√ß√£o faz e qual √© sua utilidade

//     b. Determine qual ser√° a sa√≠da no console para cada uma das 3 entradas do usu√°rio:
//          i.   `Eu gosto de cenoura`
//          ii.  `CENOURA √© bom pra vista`
//          iii. `Cenouras crescem na terra`

//A- A FUNCAO PEGA UMA FRASE, COLOCA ELA EM LETRA MINUSCULA E DEPOIS PROCURA NO TEXTO A PALAVRA "CENOURA"
//B- SAIDAS SAO TODAS  BOOLEANS "TRUE"

//-----------------------------------------------------------------------------------------------------------------------------------

                                     //EXERCICIO DE ESCRITA DE CODIGO:

//-----------------------------------------------------------------------------------------------------------------------------------
// 1. Escreva as fun√ß√µes explicadas abaixo:
//-----------------------------------------------------------------------------------------------------------------------------------

// a) A fun√ß√£o n√£o deve receber nenhum par√¢metro e deve imprimir uma mensagem falando algumas informa√ß√µes sobre voc√™, como:

//     "Eu sou Caio, tenho 23 anos, moro em S√£o Paulo e sou estudante."

// Troque o nome, idade, cidade e se √© estudante ou n√£o por informa√ß√µes sobre voc√™.
// Lembrando que a fun√ß√£o n√£o possui entradas, apenas imprime essa mensagem.

/*
function imprimirMensagem() {
  console.log("Eu sou Raphael, tenho 22 anos, moro no Rio de Janeiro e sou estudante.")
}
imprimirMensagem()
*/
//-----------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------
// b)  Agora escreva uma fun√ß√£o que receba 4 par√¢metros que correspondem √†s informa√ß√µes de uma pessoa:
//  o nome (`string`), a idade (`number`), a cidade (`string`) e uma profiss√£o (`string`).
//  Ela deve retornar uma `string` que unifique todas as informa√ß√µes da pessoa em uma s√≥ mensagem com o template:

// Eu sou [NOME], tenho [IDADE] anos, moro em [ENDERE√áO] e sou [PROFISS√ÉO].

//- Exemplo
    
//Para a entrada:  `"La√≠s"`, `23`, `"S√£o Paulo"` e `"instrutora"`, deve retornar:
    
//     `"Eu sou La√≠s, tenho 23 anos, moro em Rua Guarapari 190 e sou instrutora."`
    
// - üí°  Dica
// Na hora de criar a frase, voc√™ pode utilizar as template strings que vimos na aula anterior!
// As vari√°veis da frase, nesse caso, ser√£o os pr√≥prios par√¢metros recebidos na fun√ß√£o

/*
function imprimirMensagemB (nome, idade, endereco, proficao){

    console.log("Eu sou", nome,"tenho", idade, "anos", "moro em", endereco, "e sou",proficao)
}

imprimirMensagemB("Raphael", 22, "Rio de janeiro", "estudante")
*/

//-----------------------------------------------------------------------------------------------------------------------------------


//-----------------------------------------------------------------------------------------------------------------------------------
// 2. Escreva as fun√ß√µes explicadas abaixo:
//-----------------------------------------------------------------------------------------------------------------------------------

//     a) Escreva uma fun√ß√£o que receba 2 n√∫meros como par√¢metros, e, dentro da fun√ß√£o, fa√ßa a soma das duas entradas e retorne o resultado.
//        Invoque a fun√ß√£o e imprima no console o resultado.

/*
function somar(numeroA, numeroB){

    const soma = Number(numeroA) + Number(numeroB)
    return soma
}

const resultado = somar(10, 10)
console.log(resultado)
*/

//-----------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------

//     b) Fa√ßa uma fun√ß√£o que recebe 2 n√∫meros e retorne um booleano que informa se o primeiro n√∫mero √© **maior ou igual** ao segundo.
    
/*
function Comparar(numeroA, numeroB){
    const comparativo = Number(numeroA) >= Number(numeroB)
 return comparativo

}

const resultado = Comparar(10, 50)
console.log(resultado)
*/

//-----------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------

//     c) Escreva uma fun√ß√£o que receba um n√∫mero e devolva um booleano indicando se ele √© par ou n√£o
    
/*
function numeroPar (numero){

   const divisaoPorDois = numero % 2
   const resultadoDaDivisao = divisaoPorDois ===0 
   console.log(resultadoDaDivisao)
   return resultadoDaDivisao
}

numeroPar(100)
*/

//-----------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------

//     d) Fa√ßa uma fun√ß√£o que recebe uma mensagem (`string`) como par√¢metro e imprima o tamanho dessa mensagem,
//        juntamente com uma vers√£o dela em letras mai√∫sculas.

/*
function palavra(texto) {
const resposta = texto.toUpperCase()
console.log(resposta, resposta.length)

}
palavra("ola")
*/

//-----------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------------------------------------------------------

// 3. Crie uma fun√ß√£o para cada uma das opera√ß√µes b√°sicas (soma, subtra√ß√£o, multiplica√ß√£o e divis√£o). Em seguida,
//pe√ßa para o usu√°rio inserir dois n√∫meros e **chame** essas 4 fun√ß√µes com esses valores inputados pelo usu√°rio sendo o argumento.
//    Por fim, mostre no console o resultado das opera√ß√µes:

//     N√∫meros inseridos: 30 e 3
//     Soma: 33
//     Diferen√ßa: 27
//     Multiplica√ß√£o: 90
//     Divis√£o: 10
    
//     - üí°  Dica
        
//         Lembre-se de converter a entrada do usu√°rio para n√∫mero antes de fazer os c√°lculos :)

/*
const numInserido = [30, 3]

function somar(numUm,numDois){
    const soma =Number(numUm) + Number(numDois)
    console.log(soma)
}
somar(numInserido[0],numInserido[1])

function subtrair(numUm,numDois){
    const subtracao =Number(numUm) - Number(numDois)
    console.log(subtracao)
}
subtrair(numInserido[0],numInserido[1])

function multiplicar(numUm,numDois){
    const multiplicacao =Number(numUm) * Number(numDois)
    console.log(multiplicacao)
}
multiplicar(numInserido[0],numInserido[1])

function dividir(numUm,numDois){
    const divisao =Number(numUm) / Number(numDois)
    console.log(divisao)
}
dividir(numInserido[0],numInserido[1])
*/

//-----------------------------------------------------------------------------------------------------------------------------------

                                     //DESAFIOS:

//-----------------------------------------------------------------------------------------------------------------------------------

// 1. Fun√ß√µes s√£o trechos de c√≥digos como quaisquer outros mas que podemos acess√°-los mais de uma vez ao longo do c√≥digo
//    atrav√©s de invoca√ß√µes/chamadas. Ent√£o, fun√ß√µes podem chamar/invocar outras fun√ß√µes tamb√©m. Sua tarefa √© escrever duas fun√ß√µes

//     a) Escreva uma *arrow function* que recebe um par√¢metro e imprime no console esse par√¢metro
    
//     b) Escreva outra *arrow function* que recebe dois valores como par√¢metros mas **nenhum retorno.**
//        Fa√ßa a soma entre esses valores e chame a sua primeira fun√ß√£o mandando este resultado da soma como entrada para imprimi-lo

     
/*
const funcaoUm = (parametroUm) =>{
        
      const resultadoUm = parametroUm
      console.log(resultadoUm)
      return resultadoUm
}

     const funcaoDois = (parametroDois, parametroTres) =>{

        const resultadoDois = parametroDois + parametroTres
        console.log(resultadoDois)
        

 }    
 funcaoUm(funcaoDois(10, 10))
 */


//-----------------------------------------------------------------------------------------------------------------------------------

//-----------------------------------------------------------------------------------------------------------------------------------
// 2. Fa√ßa uma fun√ß√£o que execute o teorema de Pit√°goras, recebendo dois catetos e calculando o valor da hipotenusa.
//     Retorne este valor, invoque a fun√ß√£o e imprima o resultado no console.  

//- üí°  Dica:       
//         A f√≥rmula do teorema √©: hip¬≤ = a¬≤ + b¬≤ , onde hip √© a hipotenusa e A e B s√£o os catetos. 
//         √â necess√°rio isolar a hipotenusa, ent√£o ao final temos: **hip = ‚àö(a¬≤ + b¬≤)**

/*
function TeoremaDePitagoras(catetoA, catetoB ){

    const formula = Number(catetoA*catetoA) + Number(catetoB*catetoB)
    const raizQuadrada = formula**(1/2)
    console.log(raizQuadrada)

}
TeoremaDePitagoras(3, 4)
*/