CREATE TABLE Actor (
    id VARCHAR(255) PRIMARY KEY,
    name VARCHAR (255) NOT NULL,
    salary FLOAT NOT NULL,
    birth_date DATE NOT NULL,
    gender VARCHAR(6) NOT NULL
);

a) Nesta tabela, utilizamos o FLOAT para declarar o salário, porque esta é uma forma de representar um número não inteiro em uma tabela.
 Explique os demais comandos que estão nessa query.

 VARCHAR = tipo string (255 caracteres maximos)
 DATE = tipo de data, (yyyy-mm-dd)
 PRIMARY KEY = define a chave de identificaçao de cada dado no banco
 NOT NULL = define que a minha coluna nao pode ficar vazia

b) O comando SHOW é bem útil para nos prover informações sobre bancos, tabelas, e mais. Utilize os comandos: SHOW DATABASES e SHOW TABLES.
 Explique os resultados.

 SHOW DATABASES = Ver os bancos de dados presentes no sistema
 SHOW TABLES = Mostrar as tabelas do banco de dados atual

c) O comando DESCRIBE pode ser usado para ver estrutura de uma tabela. Utilize o comando  DESCRIBE Actor e explique os resultados.

 DESCRIBE = Mostrar a tabela escolhida

----------------------------------------------------------------------------------------------------------------------------------------------------------------------
INSERT INTO Actor (id, name, salary, birth_date, gender)
VALUES(
  "001", 
  "Tony Ramos",
  400000,
  "1948-08-25", 
  "male"
);

Atente-se a 3 fatos nessa query:

1. A ordem dos valores (`VALUES`) é definida pela lista colocada depois do nome da tabela (`ACTOR`): `(id, name, salary, birth_date)`.
2. Os valores `VARCHAR` (strings) devem ser indicados com `"`
3. As datas seguem o padrão: `YYYY-MM-DD`

*a) Escreva uma query que crie a atriz `Glória Pires`, com o id `002`, salário R$1.200.000 e data de nascimento 23 de Agosto de 1963*

     INSERT INTO Actor (id, name, salary, birth_date, gender)
    VALUES(
      "002", 
      "Glória Pires",
      1200000,
      "1963-08-23", 
      "female"
    );


b) *Escreva uma query que tente adicionar um outro elemento a tabela com o mesmo id do item anterior `002`. Isso gerará um erro.
 Anote a mensagem de erro, traduza (pode usar o Google Tradutor diretamente) e explique porque esse erro aconteceu.*

 Error Code: 1062. Duplicate entry '002' for key 'PRIMARY'
 Dois arquivos nao podem ter a mesma chave 

 c)

     INSERT INTO Actor (id, name, salary, birth_date, gender)
    VALUES(
      "003", 
      "Fernanda Montenegro",
      300000,
      "1929-10-19", 
      "female"
    );

d)

    INSERT INTO Actor (id, name, salary, birth_date, gender)
    VALUES(
      "004",
      "atorX",
      400000,
      "1949-04-18", 
      "male"
    );

e)

    INSERT INTO Actor (id, name, salary, birth_date, gender)
    VALUES(
      "005", 
      "Juliana Paes",
      71933333,
      "1979-03-26", 
      "female"
    );

f) *Por fim, crie mais um ator e mais uma atriz e prossiga para os próximos exercícios.*

   INSERT INTO Actor (id, name, salary, birth_date, gender)
    VALUES(
      "006", 
      "AtorY",
      71933333,
      "1979-03-26", 
      "male"
    );
    

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Com os dados criados, podemos nos aventurar nas queries de seleção de dados. Elas são indicadas pelo operador `SELECT`.
 Talvez a query mais famosa que existe é:

```sql
SELECT * FROM Actor
```

Ela faz com que se retornem todas as **colunas** (ou "informações") de todas as **linhas** (ou "entradas") da nossa tabela. 

Se quisermos limitar as **colunas**, devemos indicar assim logo após o operador `SELECT`. Abaixo, está uma query que retorna
 somente o `id`e o `salário`de todos os atores

```sql
SELECT id, salary from Actor 
```

Agora, se quisermos colocar uma condição para retornar as **linhas** (entradas), devemos usar o operador `WHERE` e colocar
 a nossa condição que pode usar alguns operadores (`=`, `!=`, `>`, etc). Abaixo, está uma query que retorna somente o id e o nome dos atores.

```sql
SELECT id, name from Actor WHERE gender = "male"
```

a) *Escreva uma query que retorne todas as informações das atrizes*

SELECT * from Actor WHERE gender = "female"

b) *Escreva uma query que retorne o salário do ator com o nome `Tony Ramos`*

SELECT salary from Actor WHERE name = "Tony Ramos";

c) *Escreva uma query que retorne todas as informações que tenham o `gender` com o valor `"invalid"`. Explique o resultado.*

  SELECT * from Actor WHERE gender= "invalid"

d) *Escreva uma query que retorne o id, nome e salário de todos que tenham o salário com o valor máximo de R$500.000*

SELECT id, name, salary from Actor WHERE salary <= 500000;

e) **T*ente usar a query abaixo. Você vai reparar que ela vai gerar um erro. Anote a mensagem de erro,
 traduza (pode usar o Google Tradutor diretamente) e explique porque esse erro aconteceu. Por fim, corrija individualmente
 a query para que funcione, teste o comando e anote-o também como resposta*

```sql
SELECT id, nome from Actor WHERE id = "002"
```

 SELECT id, name from Actor WHERE id = "002";

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

